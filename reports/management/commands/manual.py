from django.core.management import BaseCommandimport datetimeimport refrom bs4 import BeautifulSoupimport jsonimport itertoolsfrom reports.models import PostRoportManual, GidroPostfrom collections import ChainMapclass Command(BaseCommand):    help = 'Closes the specified poll for voting'    def open_html(self):        with open(f'E:\ВІТЯ\gidro_bot\data_html\{datetime.date.today().strftime("%Y-%m-%d")}.html', 'r', encoding='koi8-u') as file:            r = file.read()            soup = BeautifulSoup(r, "lxml")            d = soup.find_all('pre')            s = ['='.join(i) for i in d]            # print(s)            telegrams = [re.sub(("\s+"), " ", i) for i in s]            # file_str = re.sub(("\s+"), " ", soup.text)            # telegrams = re.findall("(\d{4}-\d{2}-\d{2}).(\d{2}:\d{2}:\d{2})\s([\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.[\d{3,5}]*.)",file_str)            return telegrams    def pars_telegram(self):        self.list_telegrams =  self.open_html()        self.index_post = [i[20:26] for i in self.list_telegrams]        print(self.index_post)        self.date_telegrame =  [i[26:32] for i in self.list_telegrams]        print(self.date_telegrame)        self.date_time_report =  dict(zip(self.index_post, [i[0:20] for i in self.list_telegrams]))        print(self.date_time_report)        self.temperatur = dict(zip(self.index_post, [i[30:35] for i in self.list_telegrams]))        self.change_level  = [i[18:23] for i in self.list_telegrams]        return self    def telegram_split(self)->list:        for x in self.pars_telegram().date_telegrame:            d = ''.join(x)            patern_date = re.compile(f'{datetime.date.today().strftime("%d")}081|{datetime.date.today().strftime("%d")}082|{datetime.date.today().strftime("%d")}083|{datetime.date.today().strftime("%d")}087')            patern_SU = re.compile('SU \w{1,4}')            if d[0:2] == datetime.date.today().strftime("%d"):                telegrams_with_date = re.sub(patern_date,'',' '.join(self.list_telegrams))                telegrams_with_SU = re.sub(patern_SU,'', telegrams_with_date)                telegrams_oprac = telegrams_with_SU.split("=")                print(telegrams_oprac)        return telegrams_oprac    def parsing_telegram_water_level_08_00(self):        level_morning_iterable = [re.findall('(1\d{4})', i) for i in self.telegram_split()]        l_m_join = [' '.join(i) for i in level_morning_iterable]        l_m = [i.split(' ') for i in l_m_join]        level_morning = []        for i in l_m[0]:            if i.isnumeric():                t = ''.join(i)                if i in t:                    c = ((int(i) - 10000) - 5000)                    if c <= 0:                        level_morning.append(c + 5000)                    if c >= 0:                        level_morning.append(-c)        dict_level_morning = dict(zip(self.pars_telegram().index_post, level_morning))        return dict_level_morning    def parsing_telegram_water_level_20_00(self):        level_evening_iterable = [i for i in [re.findall('(3\d{4})', i) for i in self.telegram_split()]]        l_v_join = [' '.join(i)  for i in level_evening_iterable]        l_v = [i.split(' ') for i in l_v_join]        level_evening = []        for i in l_v[0]:            if i.isnumeric():                t = ''.join(i)                if i in t:                    c = ((int(i) - 30000)-5000)                    if c <=0:                        level_evening.append(c+5000)                    if c >=0:                        level_evening.append(-c)            return level_evening        #     dict_level_evening = dict(zip(self.index_post, level_evening))        #        # return dict_level_evening    def preciptation(self):        precipitation = dict(zip(self.pars_telegram().index_post, [i for i in [re.findall('(0\d{4}|0\d{3}/)', i) for i in self.telegram_split()]]))        return precipitation    def precipitation_0_24(self):        pricip_doba = [v[:1] for v in self.preciptation().values()]        rozpakovanuy_pricip_doba = []        for v in pricip_doba:            ind = "".join(v)            rozpakovanuy_pricip_doba.append(ind)        opadu_doba = [f[1:4] for f in rozpakovanuy_pricip_doba]        opadu_doba_int = []        for i in opadu_doba:            if i.isnumeric():                t = ''.join(i)                if i in t:                    c = int(i) - 900                    if c >= 0:                        opadu_doba_int.append(float((c - 90)/10))                        continue                    if c <= 0:                        opadu_doba_int.append(int(c)+900)                        continue            if i is not i.isnumeric():                p = None                opadu_doba_int.append(p)        dict_opadu_doba = dict(zip(self.pars_telegram().index_post, opadu_doba_int))        return dict_opadu_doba    def precipitation_08_20(self):        pricip_den = [v[1:2] for v in self.preciptation().values()]        rozpakovanuy_pricip_den = []        for v in pricip_den:            ind = " ".join(v)            rozpakovanuy_pricip_den.append(ind)        opadu_den = [f[1:4] for f in rozpakovanuy_pricip_den]        opadu_den_int = []        for i in opadu_den:            if i.isnumeric():                t = ''.join(i)                if i in t:                    c = int(i) - 900                    if c >=0:                        opadu_den_int.append(float((c - 90)/10))                        continue                    if c <=0:                        opadu_den_int.append(int(c)+900)                        continue            if i is not i.isnumeric():                p = None                opadu_den_int.append(p)        dict_opadu_doba = dict(zip(self.pars_telegram().index_post, opadu_den_int))        return dict_opadu_doba    def dict_report(self):        ds  = [self.pars_telegram().date_time,self.parsing_telegram_water_level_08_00(),               self.parsing_telegram_water_level_20_00(),               self.precipitation_0_24(),               self.precipitation_08_20()]        # d = {}        # for k in self.pars_telegram().date_time.keys():        #     d[k] = tuple(d[k] for d in ds)        return ds    def munual_save(self, p)->PostRoportManual:        ind = p[0]        post = GidroPost.objects.get(index_posta=ind)        date = p[1][0]        date_t= date[0]        time = date[1]        r_time = f'{date_t} {time}'        l_8= p[1][1]        l_20 = p[1][2]        p_dob = p[1][3]        p_den = p[1][4]        return PostRoportManual(post= post,report_time= r_time, water_level_08_00 = l_8,                                     water_level_20_00= l_20, precipitation_doba= p_dob,                                     precipitation_den= p_den)    def handle(self, *args, **options):        for i in self.dict_report():            report = self.munual_save(i.items())            # print(report)            # report.save()        # for i in self.dict_report():        #     self.munual_save(i)        #     print(i)        # self.open_html()            # try:            #     report = i            #     # report.save()            #     print(f'save {report}')            #            # except:            #     print(f'not save')